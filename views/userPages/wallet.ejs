<%- include('../partials/user/header.ejs') %> 
<%- include('../partials/user/sidebarProfile.ejs') %>

<style>
  .wallet-card {
    max-width: 600px; /* keeps it neat on large screens */
    width: 100%;      /* full width on mobile */
    max-height: fit-content;
  }
  .add-input {
    border: none;
    text-align: center;
    padding: 1.2rem 0;
    font-size: 22px;
    font-weight: bolder;
    background: rgb(240, 240, 240);
    width: 100%; /* stretches input */
  }
  .add-input:focus-visible {
    outline: none !important;
  }

  /* tweak buttons for mobile */
  .preset-btn {
    margin: 0.25rem;
    min-width: 80px;
  }
</style>

<main class="w-100 min-vh-100 d-flex justify-content-center px-md-2 p-0">
  <div class="card rounded-4 p-4 shadow wallet-card">
    <div class="row g-3">
      <div class="col-12 text-center">
        <p class="fs-3 fw-bold mt-1">MY WALLET</p>
      </div>

      <!-- BALANCE -->
      <div class="col-12 rounded-3 p-3 border bg-light">
        <span class="fs-6 fw-bold">TOTAL BALANCE</span>
        <hr class="my-2" />
        <span class="d-flex justify-content-between align-items-center">
          <span class="fs-6 fw-semibold">WALLET</span>
          <span class="text-success fs-4 fw-semibold" id="balance">₹<%=Math.round(wallet?.balance)%></span>
        </span>
      </div>

      <!-- ADD MONEY -->
      <div class="col-12 rounded-3 p-3 border bg-light">
        <span class="fs-6 fw-bold">ADD TO WALLET</span>
        <hr class="my-2" />
        <form id="walletForm" action="#" method="POST">
          <div class="text-center p-1">
            <input
              type="text"
              id="amount"
              name="amount"
              class="add-input rounded-3"
              value="₹"
              maxlength="10"
              placeholder="Amount"
            />
          </div>

          <div class="text-center p-2 d-flex flex-wrap justify-content-center">
            <button type="button" class="btn btn-outline-dark preset-btn" data-value="100">₹100</button>
            <button type="button" class="btn btn-outline-dark preset-btn" data-value="200">₹200</button>
            <button type="button" class="btn btn-outline-dark preset-btn" data-value="500">₹500</button>
          </div>

          <div class="text-center p-2">
            <button type="submit" class="btn btn-dark fw-bold w-100">ADD MONEY</button>
          </div>
        </form>
      </div>

      <!-- TRANSACTIONS -->
      <div class="col-12 text-center">
        <a href="/wallet/history" class="btn btn-primary px-4 fw-semibold w-100">Show Transaction History</a>
      </div>
    </div>
  </div>
</main>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script>
  // Toastr configuration
  toastr.options = {
    closeButton: true,
    progressBar: true,
    positionClass: "toast-top-center",
    timeOut: "2000"
  };

  const input = document.getElementById("amount");
  const form = document.getElementById("walletForm");

  // Always keep ₹ prefixed and allow only numbers
  input.addEventListener("input", () => {
    let value = input.value.replace(/₹/g, "").replace(/[^0-9]/g, "");
    input.value = "₹" + value;
  });

  // Preset amount buttons
  document.querySelectorAll(".preset-btn").forEach((btn) => {
    btn.addEventListener("click", () => {
      input.value = "₹" + btn.dataset.value;
    });
  });

  // On form submit → send only numbers (without ₹)
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const amountValue = input.value.replace("₹", "").trim();

    // Basic validation
    if (!amountValue || isNaN(amountValue) || parseInt(amountValue) <= 0) {
      toastr.error("Please enter a valid amount.");
      return;
    }

    try {
      // Step 1: Create Razorpay order from backend
      const res = await fetch("/wallet/add", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount: amountValue }),
      });

      const { order } = await res.json();

      if (!order || !order.id || order.status !== "created") {
        toastr.error("Failed to create order. Try again.");
        return;
      }

      // Step 2: Razorpay Checkout
      const options = {
        key: "<%= process.env.RAZORPAY_KEY_ID %>", // injected from backend
        amount: order.amount, // in paise
        currency: "INR",
        name: "Venicara Wallet",
        description: "Add Money to Wallet",
        order_id: order.id,
        handler: async function (response) {
          try {
            // Step 3: Verify payment on backend
            const verifyRes = await fetch("/wallet/verify-payment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(response),
            });

            const verifyData = await verifyRes.json();

            if (verifyData.status) {
              document.getElementById("balance").textContent = `₹${verifyData.balance}`;
              toastr.success("Wallet balance updated!");
            } else {
              toastr.error("Payment verification failed!");
            }
          } catch (err) {
            console.error(err);
            toastr.error("Verification error. Try again.");
          }
        },

        theme: { color: "#121212" },
        ondismiss:async function() {
          // Called when user closes the Razorpay modal without completing payment
          toastr.warning("Payment was not completed. Please try again.");
          const res=await fetch('/wallet/addMoneyFailed',{
            method:'PATCH',
            
          })
        }

      };

      const rzp = new Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error(error);
      toastr.error("Something went wrong. Try again later.");
    }
  });
</script>

</body>
</html>
